@model Ocuda.Promenade.Controllers.ViewModels.Help.ScheduleViewModel

@if (Model?.SegmentText != null)
{
    if (!string.IsNullOrEmpty(Model.SegmentText.Header))
    {
        <h1>@Model.SegmentText.Header</h1>
    }
    @Html.Raw(Model.SegmentText.Text)
}
else
{
    <h1>@Localizer[Promenade.ScheduleYourTime]</h1>
}

@if (!string.IsNullOrEmpty(Model?.WarningText))
{
    <div class="row">
        <div class="col-12 col-sm-10 offset-sm-1">
            <div class="alert alert-warning prom-alert">
                <p>@Html.Raw(Model.WarningText)</p>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <form method="post" action="@Url.Action("Schedule", "Help")">
            <input asp-for="RequestedDate"
                   type="date"
                   formgroup />
            <select asp-for="RequestedTime"
                    asp-items="Model.TimeBlocks"
                    formgroup>
            </select>
            <select asp-for="SubjectId"
                    asp-items="Model.Subjects"
                    formgroup></select>
            <div>
                <button type="submit"
                        id="submitButton"
                        class="btn btn-outline-dark m-2 btn-lg float-end">
                    @Localizer[Promenade.ButtonNext]
                    <span class="fa-solid fa-chevron-right"></span>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const today = '@Model.FirstAvailable.ToString("O").Substring(0, 10)';
    const lastDate = '@(Model.LastAvailableDate.HasValue ? Model.LastAvailableDate.Value.ToString("O").Substring(0, 10) : "")';
    const baseUrl = '@Url.Action(nameof(HelpController.Availability))';
    document.querySelector("#RequestedDate").setAttribute('min', today);
    if (lastDate.length > 0) {
        document.querySelector("#RequestedDate").setAttribute('max', lastDate);
    }

    document.querySelector("#RequestedDate").addEventListener("change", () => {
        const selectedDate = document.querySelector("#RequestedDate").value;
        getTimeBlocks(selectedDate);
    })

    async function getTimeBlocks(selectedDate) {
        const fullUrl = baseUrl.endsWith('/') 
            ? baseUrl + selectedDate 
            : baseUrl + '/' + selectedDate;
        console.info(fullUrl)
        const response = await fetch(fullUrl);
        const timeBlocks = await response.json();
        updateTimeOptions(timeBlocks);
    }

    function updateTimeOptions(timeBlocks) {
        const optionEl = document.querySelector("#RequestedTime");
        optionEl.innerHTML = "";
        if (timeBlocks.length === 0) {
            document.querySelector("#submitButton").disabled = true;
            return optionEl.appendChild(new Option("No appointments available", "No appointments available"))
        }
        timeBlocks.forEach(block => {
            optionEl.appendChild(new Option(block.text, block.value));
        })
        document.querySelector("#submitButton").disabled = false;
    }
</script>