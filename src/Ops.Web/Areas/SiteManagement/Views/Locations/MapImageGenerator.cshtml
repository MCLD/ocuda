@model Ocuda.Ops.Controllers.Areas.SiteManagement.ViewModels.Location.LocationMapViewModel

<div class="row">
    <div class="col-sm-10">
        <h1>
            Map Image Generator
        </h1>
        <h1>
            <small class="text-muted">
                @Model.Location.Name
            </small>
        </h1>
    </div>
    <div class="col-sm-2">
        <a class="btn btn-outline-dark mt-2 mb-1 ms-2 float-end"
           asp-controller="@Ocuda.Ops.Controllers.Areas.SiteManagement.LocationsController.Name"
           asp-action="@(nameof(Ocuda.Ops.Controllers.Areas.SiteManagement.LocationsController.Location))"
           asp-route-locationStub="@Model.Location.Stub">Back</a>
    </div>
</div>
<div class="row">
    <div class="col-sm-6">
        <div class="alert alert-success" id="status-message" style="display: none;"></div>
        <div class="alert alert-warning" id="status-error" style="display: none;"></div>
    </div>
</div>
<div class="row">
    <div class="col-sm-6">
        <div class="d-flex mb-3">
            <label class="col-4" for="zoom-level">
                Zoom Level
                <span class="fa-regular fa-circle-question"
                      title="Google Maps zoom levels range from 0 to 18. For most locations, a zoom level between 12 - 14 is most practical."
                      data-bs-toggle="tooltip"
                      data-placement="top">
                </span>
            </label>
            <input class="form-control" id="zoom-level" name="zoom-level" type="number" value="13" min="0" max="18" />
        </div>
        <div class="d-flex mb-3">
            <label class="col-4" for="scale">
                Scale
                <span class="fa-regular fa-circle-question"
                      title="Scale value can be 1 or 2. For high dpi displays, use scale 2 to prevent image from being distorted."
                      data-bs-toggle="tooltip"
                      data-placement="top">
                </span>
            </label>
            <input class="form-control" id="scale" name="scale" type="number" value="2" min="1" max="2" />
        </div>
        <div class="d-flex mb-3">
            <label class="col-4" for="image-width">Image Width</label>
            <input class="form-control" id="image-width" name="image-width" type="number" step="10" value="500" />
        </div>
        <div class="d-flex mb-3">
            <label class="col-4" for="image-height">Image Height</label>
            <input class="form-control" id="image-height" name="image-height" type="number" step="10" value="250" />
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-6" id="image-preview-container"></div>
</div>

<div class="row">
    <div class="col-sm-6 d-flex gap-3">
        <div>
            <button class="btn btn-primary w-100" id="preview-image">Preview</button>
        </div>
        <div class="flex-grow-1">
            <button class="btn btn-success w-100" id="save-image" disabled>Optimize and Save</button>
        </div>
    </div>

</div>

@section Scripts
    {
    <script>
        $(function () {
            $('[data-bs-toggle="tooltip"]').tooltip()
        })

        document.querySelector('#preview-image').addEventListener('click', showPreview);
        document.querySelector('#save-image').addEventListener('click', saveImage);
        document.addEventListener('keydown', e => {
            if (e.key === 'Enter')
            {
                showPreview();
            }
        })

        const locationAddress = "@Model.Location.Address";
        const apiKey = "@Model.MapApiKey";
        const fileName = "@Model.Location.Stub";

        const optimizePath = "@Url.Action(nameof(ImageOptimizerController.OptimizeFromBase64), ImageOptimizerController.Name)";
        const savePath = "@Url.Action(nameof(LocationsController.UpdateMapImage), LocationsController.Name, new { locationCode = Model.Location.Code})";

        const zoomEl = document.querySelector('#zoom-level');
        const scaleEl = document.querySelector('#scale');
        const widthEl = document.querySelector('#image-width');
        const heightEl = document.querySelector('#image-height');

        let requestingPreview = false;
        let imageBase64;

        function inputsComplete() {
            let complete = true;
            document.querySelectorAll('input').forEach(input => {
                if (!input.value) {
                    input.parentElement.firstElementChild.classList.add("text-danger");
                    complete = false;
                } else {
                    input.parentElement.firstElementChild.classList.remove("text-danger");
                }
            });

            return complete;
        }

        function showStatus(statusMessage) {
            if (statusMessage) {
                showError();
                document.querySelector('#status-message').innerText = statusMessage;
                document.querySelector('#status-message').style.display = "block";
            } else {
                document.querySelector('#status-message').innerText = "";
                document.querySelector('#status-message').style.display = "none";
            }
        }

        function showError(errorMessage) {
            if (errorMessage) {
                showStatus();
                document.querySelector('#status-error').innerText = errorMessage;
                document.querySelector('#status-error').style.display = "block";
            } else {
                document.querySelector('#status-error').innerText = "";
                document.querySelector('#status-error').style.display = "none";
            }
        }

        async function showPreview() {
            if (requestingPreview) return;

            showStatus("Fetching preview image...");
            showError();

            if (!inputsComplete()) {
                return alert("All input fields must be complete");
            }

            try {
                requestingPreview = true;
                document.querySelector('#save-image').disabled = true;

                showStatus('Fetching map...');

                const mapImageResult = await fetch(`https://maps.googleapis.com/maps/api/staticmap?zoom=${zoomEl.value}&size=${widthEl.value}x${heightEl.value}&maptype=roadmap&markers=color:red|${locationAddress}&key=${apiKey}&style=feature:poi|visibility:off&scale=${scaleEl.value}`);

                if (!mapImageResult.ok) {
                    showError(`Error fetching map image: ${mapImageResult.status} ${await mapImageResult.text()}.`);
                    return;
                }

                const imageBlob = await mapImageResult.blob();
                const dataBase64 = await new Promise(resolve => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.readAsDataURL(imageBlob);
                });
                imageBase64 = dataBase64.split(',')[1];

                imagePath = mapImageResult.url;

                const img = document.createElement('img');
                img.src = mapImageResult.url;
                img.className = 'mb-3 img-fluid';

                const imageContainer = document.querySelector('#image-preview-container');
                imageContainer.innerHTML = '';
                imageContainer.appendChild(img);

                document.querySelector('#save-image').disabled = false;
            } catch (e) {
                console.error(e);
                alert(e);
                showStatus();
                showError(`Error optimizing image: ${e.value}`);
            } finally {
                requestingPreview = false;
            }
        }

        async function saveImage() {
            showStatus("Optimizing image...");
            try {
                const saveResponse = await fetch(savePath, {
                    headers: {
                        "Content-Type": "application/json"
                    },
                    method: 'post',
                    body: JSON.stringify(imageBase64)
                });

                const saveMessage = await saveResponse.json();

                showStatus(saveMessage);
            } catch (e) {
                console.log(e);
                showError(`Error optimizing image. ${e.value}`);
                return;
            }
        }
    </script>
}